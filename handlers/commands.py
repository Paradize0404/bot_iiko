import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from states import RegisterStates
from keyboards.main_keyboard import main_menu_keyboard
from services.employees import fetch_employees
from db.employees_db import async_session, Employee
from db.nomenclature_db import fetch_products
logging.basicConfig(level=logging.INFO)

router = Router()

@router.message(F.text.startswith("/start"))
async def start(message: Message, state: FSMContext):
    logging.info(f"üì® /start –æ—Ç {message.from_user.id}")
    msg = await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç (–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é)?")
    await state.set_state(RegisterStates.waiting_for_name)
    await state.update_data(question_msg_id=msg.message_id)

@router.message(RegisterStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    logging.info(f"üë§ –§–∞–º–∏–ª–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.id}: {message.text}")
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_name = message.text.strip()
    data = await state.get_data()
    msg_id = data.get("question_msg_id")

    async with async_session() as session:
        result = await session.execute(
            Employee.__table__.select().where(Employee.last_name == last_name)
        )
        row = result.fetchone()

        if row:
            employee = await session.get(Employee, row[0])
            employee.telegram_id = str(message.from_user.id)
            await session.commit()
            greet_text = f"–ü—Ä–∏–≤–µ—Ç, {employee.first_name} üëã"

            if msg_id:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=msg_id,
                    text=greet_text
                )
            else:
                await message.answer(greet_text)

            await message.answer("–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
            await state.clear()

        else:
            warn_text = "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."

            if msg_id:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=msg_id,
                    text=warn_text
                )
            else:
                await message.answer(warn_text)

            # ‚ùå –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer(warn_text, reply_markup=types.ReplyKeyboardRemove())

            # ‚ùóÔ∏è–ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state, –æ—Å—Ç–∞—ë—Ç—Å—è –≤ RegisterStates.waiting_for_name

            # –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è

@router.message(F.text == "/cancel")
async def cancel_process(message: Message, state: FSMContext):
    logging.info(f"‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç {message.from_user.id}")
    data = await state.get_data()

    msg_ids_to_delete = []
    for key in ["form_message_id", "question_msg_id", "quantity_prompt_message_id", "search_message_id", "user_text_id"]:
        if key in data:
            msg_ids_to_delete.append(data[key])

    for msg_id in msg_ids_to_delete:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")

    try:
        await message.delete()
    except Exception:
        pass

    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())



@router.message(F.text == "/load_staff")
async def load_staff(message: Message):
    employees = await fetch_employees()
    await message.answer(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees)}")


# @router.message(F.text == "/load_products")
# async def load_products(message: Message):
#     await message.answer("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É‚Ä¶")
#     try:
#         products = await fetch_products()
#         await init_db()           # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–∞–¥–æ
#         await save_products(products)
#         await message.answer(f"‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(products)}")
#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")