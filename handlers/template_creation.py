import asyncpg
import pprint
from aiogram import Bot
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncEngine
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import String, select, JSON, inspect
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String
from db.employees_db import async_session
from sqlalchemy.dialects.postgresql import insert

from utils.telegram_helpers import edit_or_send  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

router = Router()

Base = declarative_base()

STORE_CACHE = {}

class PreparationTemplate(Base):
    __tablename__ = "preparation_templates"

    name: Mapped[str] = mapped_column(String, primary_key=True)
    from_store_id: Mapped[str] = mapped_column(String)
    to_store_id: Mapped[str] = mapped_column(String)
    supplier_id: Mapped[str] = mapped_column(String, nullable=True)
    supplier_name: Mapped[str] = mapped_column(String, nullable=True)
    items: Mapped[dict] = mapped_column(JSON)



class Store(Base):
    __tablename__ = "stores"

    id = Column(String, primary_key=True)
    name = Column(String)
    code = Column(String)
    type = Column(String)

class Nomenclature(Base):
    __tablename__ = "nomenclature"

    id = Column(String, primary_key=True)
    name = Column(String)
    parent = Column(String)
    mainunit = Column("mainunit", String)
    type = Column(String)


class Supplier(Base):
    __tablename__ = "suppliers"
    id = Column(String, primary_key=True)
    code = Column(String)
    name = Column(String)



STORE_NAME_MAP = {
    "–ë–∞—Ä": ["–ë–∞—Ä –ü–∏—Ü—Ü–µ—Ä–∏—è"],
    "–ö—É—Ö–Ω—è": ["–ö—É—Ö–Ω—è –ü–∏—Ü—Ü–µ—Ä–∏—è"],
    "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π": ["–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π –ü–∏—Ü—Ü–µ—Ä–∏—è"],
    "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è": ["–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ü–∏—Ü—Ü–µ—Ä–∏—è"],  # –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è
}



PARENT_FILTERS = [
    '4d2a8e1d-7c24-4df1-a8bd-58a6e2e82a12',
    '6c5f1595-ce55-459d-b368-94bab2f20ee3'  # –î–∞, –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ ‚Äî —Ç—ã —ç—Ç–æ —É–∫–∞–∑–∞–ª
]

async def ensure_preparation_table_exists(engine: AsyncEngine):
    async with engine.begin() as conn:
        def check_tables(sync_conn):
            inspector = inspect(sync_conn)
            return inspector.get_table_names()

        tables = await conn.run_sync(check_tables)

        if "preparation_templates" not in tables:
            await conn.run_sync(Base.metadata.create_all)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ preparation_templates —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ preparation_templates —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def preload_stores():
    global STORE_CACHE
    async with async_session() as session:
        result = await session.execute(select(Store.name, Store.id))
        for name, store_id in result.all():
            STORE_CACHE[name.strip()] = store_id


def get_store_keyboard(variants: list[str], prefix: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"{prefix}:{name}")]
        for name in variants
    ])



async def get_store_id_by_name(user_input_name: str) -> str | None:
    valid_names = STORE_NAME_MAP.get(user_input_name.strip())
    if not valid_names:
        return None

    for db_name in valid_names:
        if db_name.strip() in STORE_CACHE:
            return STORE_CACHE[db_name.strip()]
    return None


async def search_nomenclature(partial_name: str) -> list[dict]:
    async with async_session() as session:
        terms = [t.strip() for t in partial_name.lower().split() if t.strip()]
        if not terms:
            return []

        query = select(Nomenclature.id, Nomenclature.name, Nomenclature.mainunit).limit(50)

        # ‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ä–æ–¥–∏—Ç–µ–ª—è–º
        query = query.where(Nomenclature.parent.in_(PARENT_FILTERS))

        # ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –∑–∞–ø—Ä–æ—Å–∞
        for term in terms:
            query = query.where(Nomenclature.name.ilike(f"%{term}%"))

        result = await session.execute(query)
        rows = result.all()
        return [{"id": r.id, "name": r.name, "mainunit": r.mainunit} for r in rows]



async def search_suppliers(partial_name: str) -> list[dict]:
    async with async_session() as session:
        terms = [t.strip().lower() for t in partial_name.split() if t.strip()]
        if not terms:
            return []

        query = select(Supplier.id, Supplier.name).limit(50)
        for term in terms:
            query = query.where(Supplier.name.ilike(f"%{term}%"))

        result = await session.execute(query)
        rows = result.all()
        return [{"id": r.id, "name": r.name} for r in rows]



# üîÑ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TemplateStates(StatesGroup):
    Name = State()
    FromStore = State()
    ToStore = State()
    SelectSupplier = State()
    AddItems = State()
    SetPrice = State() 



async def render_template_status(state: FSMContext, bot: Bot, chat_id: int):
    data = await state.get_data()
    msg_id = data.get("status_message_id")

    name = data.get("template_name", "‚Äî")
    from_store = data.get("from_store_name", "‚Äî")
    to_store = data.get("to_store_name", "‚Äî")
    supplier = data.get("supplier_name", "‚Äî")  # ‚úÖ –í–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–æ–±–∞–≤—å
    items = data.get("template_items", [])

    items_text = "\n".join([
        f"‚Ä¢ {item['name']} ‚Äî {item.get('price', '‚Äî')} ‚ÇΩ" if data.get("to_store_name") == "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è" else f"‚Ä¢ {item['name']}"
        for item in items
    ]) or "‚Äî"

    text = (
        f"üì¶ <b>–®–∞–±–ª–æ–Ω:</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
        f"–°–∫–ª–∞–¥ ‚û°Ô∏è: <code>{from_store}</code>\n"
        f"–°–∫–ª–∞–¥ ‚¨ÖÔ∏è: <code>{to_store}</code>\n"
        f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: <b>{supplier}</b>\n"
        f"üçï <b>–ü–æ–∑–∏—Ü–∏–∏:</b>\n{items_text}"
    )

    try:
        await bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=text, parse_mode="HTML")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")

# üõ†Ô∏è –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@router.callback_query(F.data == "prep:create_template")
async def start_template_creation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(template_items=[])

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id
    

    await state.set_state(TemplateStates.Name)

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.delete()
    status = await callback.message.answer("üì¶ –®–∞–±–ª–æ–Ω\n(–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è...)")
    msg = await callback.message.answer("üõ† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
    await state.update_data(
        form_message_id=msg.message_id,
        status_message_id=status.message_id,
        template_items=[]
    )

# 1Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@router.message(TemplateStates.Name)
async def get_template_name(message: types.Message, state: FSMContext):
    await message.delete()  # üßº –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º

    await state.update_data(template_name=message.text)
    msg_id = (await state.get_data())['form_message_id']

    keyboard = get_store_keyboard(["–ë–∞—Ä", "–ö—É—Ö–Ω—è", "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π"], prefix="fromstore")
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text="üì¶ –° –∫–∞–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞?",
        reply_markup=keyboard
    )
    await render_template_status(state, message.bot, message.chat.id)


@router.callback_query(F.data.startswith("fromstore:"))
async def handle_from_store_choice(callback: types.CallbackQuery, state: FSMContext):
    store_name = callback.data.split(":")[1]
    store_id = await get_store_id_by_name(store_name)
    if not store_id:
        return await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")

    # üëá –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ id, –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(
        from_store_id=store_id,
        from_store_name=store_name
    )

    keyboard = get_store_keyboard(["–ë–∞—Ä", "–ö—É—Ö–Ω—è", "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è"], prefix="tostore")
    await state.set_state(TemplateStates.ToStore)
    await callback.message.edit_text("üè¨ –ù–∞ –∫–∞–∫–æ–π —Å–∫–ª–∞–¥?", reply_markup=keyboard)

    await render_template_status(state, callback.bot, callback.message.chat.id)


@router.callback_query(F.data.startswith("tostore:"))
async def handle_to_store_choice(callback: types.CallbackQuery, state: FSMContext):
    store_name = callback.data.split(":")[1]
    store_id = await get_store_id_by_name(store_name)
    if not store_id:
        return await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")

    await state.update_data(to_store_id=store_id, to_store_name=store_name)

    if store_name == "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è":
        await state.set_state(TemplateStates.SelectSupplier)
        await callback.message.edit_text("üßæ –î–ª—è –∫–æ–≥–æ –≥–æ—Ç–æ–≤–∏–º?\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    else:
        await state.set_state(TemplateStates.AddItems)
        await callback.message.edit_text("üçï –ß—Ç–æ –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è:")

    await render_template_status(state, callback.bot, callback.message.chat.id)

@router.message(TemplateStates.SelectSupplier)
async def handle_supplier_search(message: types.Message, state: FSMContext):
    query = message.text.strip()
    await message.delete()

    results = await search_suppliers(query)
    if not results:
        return await message.answer("üö´ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

    await state.update_data(supplier_cache={item['id']: item for item in results})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=item['name'], callback_data=f"selectsupplier:{item['id']}")]
        for item in results
    ])

    msg_id = (await state.get_data())['form_message_id']
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text="üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("selectsupplier:"))
async def handle_supplier_select(callback: types.CallbackQuery, state: FSMContext):
    supplier_id = callback.data.split(":")[1]
    data = await state.get_data()
    supplier = data.get("supplier_cache", {}).get(supplier_id)

    if not supplier:
        return await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")

    await state.update_data(
        supplier_id=supplier["id"],
        supplier_name=supplier["name"]
    )

    await state.set_state(TemplateStates.AddItems)
    await callback.message.edit_text("üçï –ß—Ç–æ –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è:")
    await callback.answer()

    await render_template_status(state, callback.bot, callback.message.chat.id)


# 4Ô∏è‚É£ –ß—Ç–æ –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å (–ø–æ–∏—Å–∫)
@router.message(TemplateStates.AddItems)
async def handle_nomenclature_search(message: types.Message, state: FSMContext):
    query = message.text.strip()
    await message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    results = await search_nomenclature(query)
    if not results:
        return await message.answer("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.")

    await state.update_data(nomenclature_cache={item['id']: item for item in results})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=item['name'], callback_data=f"additem:{item['id']}")]
        for item in results
    ])  # üëà –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ

    msg_id = (await state.get_data())['form_message_id']
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text="üîé –ù–∞–π–¥–µ–Ω–æ:\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboard
    )

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("additem:"))
async def add_item(callback: types.CallbackQuery, state: FSMContext):
    item_id = callback.data.split(":")[1]
    data = await state.get_data()
    item = data.get("nomenclature_cache", {}).get(item_id)

    if not item:
        return await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    data['template_items'].append({
        'id': item_id,
        'name': item['name'],
        'mainunit': item['mainunit'],
        'quantity': None
    })
    await state.update_data(template_items=data['template_items'])
     # –ï—Å–ª–∏ —Å–∫–ª–∞–¥ "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è" ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
    if data.get("to_store_name") == "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è":
        await state.update_data(last_added_item_id=item_id)
        await state.set_state(TemplateStates.SetPrice)
        msg = await callback.message.answer(f"üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è ¬´{item['name']}¬ª:")
        await state.update_data(price_msg_id=msg.message_id)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="more:done")]
    ])
    msg_id = data.get("form_message_id")
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=msg_id,
        text=f"–î–æ–±–∞–≤–ª–µ–Ω: {item['name']}\n–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=kb
    )
    await callback.answer()
    await render_template_status(state, callback.bot, callback.message.chat.id)

@router.message(TemplateStates.SetPrice)
async def handle_set_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 199.99)")

    data = await state.get_data()
    items = data.get("template_items", [])
    item_id = data.get("last_added_item_id")

    for item in items:
        if item["id"] == item_id:
            item["price"] = price  # üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É
            break

    await state.update_data(template_items=items)
    price_msg_id = data.get("price_msg_id")
    if price_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=price_msg_id)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ü–µ–Ω—ã: {e}")

    await message.delete()

    # –í–æ–∑–≤—Ä–∞—Ç –≤ AddItems
    await state.set_state(TemplateStates.AddItems)

    msg_id = data.get("form_message_id")
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text="–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–Ω–æ–π. –ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="more:done")]]
        )
    )

    await render_template_status(state, message.bot, message.chat.id)

# # ‚è≥ –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" –ø–æ–∫–∞ –≤ –∑–∞–≥–ª—É—à–∫–µ
# @router.callback_query(F.data == "more:done")
# async def finish_template(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()

#     template = {
#         "name": data.get("template_name"),
#         "from_store_id": data.get("from_store_id"),
#         "to_store_id": data.get("to_store_id"),
#         "supplier_id": data.get("supplier_id"),       # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ
#         "supplier_name": data.get("supplier_name"),   # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ
#         "items": data.get("template_items", [])
#     }

#     # üñ®Ô∏è –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
#     print("üìã –ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω:")
#     print(template)

#     msg_id = data.get("form_message_id")
#     await callback.bot.edit_message_text(
#         chat_id=callback.message.chat.id,
#         message_id=msg_id,
#         text="üì¶ –®–∞–±–ª–æ–Ω —Å–æ–±—Ä–∞–Ω. (–≤ –∫–æ–Ω—Å–æ–ª–∏ ‚Äî ‚úÖ)"
#     )
#     await state.clear()
#     await callback.answer()



@router.callback_query(F.data == "more:done")
async def finish_template(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    template = {
        "name": data.get("template_name"),
        "from_store_id": data.get("from_store_id"),
        "to_store_id": data.get("to_store_id"),
        "supplier_id": data.get("supplier_id"),
        "supplier_name": data.get("supplier_name"),
        "items": data.get("template_items", []),
    }

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —à–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω
    msg_id = data.get("form_message_id")
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=msg_id,
        text="üì¶ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n(–≤ –∫–æ–Ω—Å–æ–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏)"
    )
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    from db.employees_db import engine
    await ensure_preparation_table_exists(engine)

    async with async_session() as session:
        await session.execute(
            insert(PreparationTemplate).values(**template).on_conflict_do_nothing()
        )
        await session.commit()

    print("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL:")
    pprint.pprint(template, width=120)