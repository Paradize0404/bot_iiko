import logging
from aiogram import Bot
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, Column, String
from sqlalchemy.orm import declarative_base
from db.employees_db import async_session, Employee
from handlers.template_creation import STORE_CACHE, preload_stores, search_nomenclature, Nomenclature
from handlers.use_template import get_unit_name_by_id
from iiko.iiko_auth import get_auth_token, get_base_url
from html import escape
import httpx
from datetime import datetime

router = Router()

Base = declarative_base()

class Accounts(Base):
    __tablename__ = "accounts"

    id = Column(String, primary_key=True)
    # root_type = Column(String)
    name = Column(String)
    code = Column(String)

# FSM –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–∫—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è
class WriteoffStates(StatesGroup):
    Store = State()
    PaymentType = State()
    Comment = State()
    AddItems = State()
    Quantity = State()

# –ö–µ—à–∏—Ä—É–µ–º —Å–∫–ª–∞–¥ -> –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Å–ø–∏—Å–∞–Ω–∏—è
STORE_PAYMENT_FILTERS = {
    "–ë–∞—Ä": ["–°–ø–∏—Å–∞–Ω–∏–µ –±–∞—Ä –ø–æ—Ä—á–∞", "–°–ø–∏—Å–∞–Ω–∏–µ –±–∞—Ä –ø—Ä–æ–ª–∏–≤", "–°–ø–∏—Å–∞–Ω–∏–µ –±–∞—Ä –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞"],
    "–ö—É—Ö–Ω—è": ["–°–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ö–Ω—è –ø–æ—Ä—á–∞", "–°–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ö–Ω—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞", "–ü–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"],
    "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π": ["–°–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–¥–∏—Ç–µ—Ä–∫–∞ –ø–æ—Ä—á–∞"]
}


async def search_nomenclature_by_type(partial_name: str, required_type: str = "product") -> list[dict]:
    async with async_session() as session:
        terms = [t.strip() for t in partial_name.lower().split() if t.strip()]
        if not terms:
            return []

        query = select(Nomenclature.id, Nomenclature.name, Nomenclature.mainunit).limit(50)
        query = query.where(Nomenclature.type == required_type)

        for term in terms:
            query = query.where(Nomenclature.name.ilike(f"%{term}%"))

        result = await session.execute(query)
        rows = result.all()
        return [{"id": r.id, "name": r.name, "mainunit": r.mainunit} for r in rows]


async def search_nomenclature_for_writeoff(partial_name: str) -> list[dict]:
    async with async_session() as session:
        terms = [t.strip() for t in partial_name.lower().split() if t.strip()]
        if not terms:
            return []

        query = select(Nomenclature.id, Nomenclature.name, Nomenclature.mainunit, Nomenclature.type).limit(50)
        query = query.where(Nomenclature.type.in_(["GOODS", "PREPARED"]))

        for term in terms:
            query = query.where(Nomenclature.name.ilike(f"%{term}%"))

        result = await session.execute(query)
        rows = result.all()
        return [{"id": r.id, "name": r.name, "mainunit": r.mainunit} for r in rows]


async def update_writeoff_header(bot: Bot, chat_id: int, msg_id: int, data: dict):
    store = data.get("store_name", "‚Äî")
    account = data.get("account_name", "‚Äî")
    reason = data.get("reason", "‚Äî")
    comment = data.get("comment", "‚Äî")
    author = data.get("user_fullname", "‚Äî")

    text = (
        f"üìÑ <b>–ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è</b>\n"
        f"üè¨ <b>–°–∫–ª–∞–¥:</b> {store}\n"
        f"üìÇ <b>–¢–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è:</b> {account}\n"
        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
        f"üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {author}"
    )

    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=msg_id,
            text=text,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}")



@router.callback_query(F.data == "doc:writeoff")
async def start_writeoff(callback: types.CallbackQuery, state: FSMContext):
    await preload_stores()
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"w_store:{name}")]
        for name in STORE_PAYMENT_FILTERS
    ])
    await state.set_state(WriteoffStates.Store)
    await callback.message.edit_text("üè¨ –° –∫–∞–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("w_store:"))
async def choose_store(callback: types.CallbackQuery, state: FSMContext):
    store_name = callback.data.split(":")[1]
    store_id = STORE_CACHE.get(f"{store_name} –ü–∏—Ü—Ü–µ—Ä–∏—è")
    if not store_id:
        return await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
    await state.update_data(store_name=store_name, store_id=store_id)

    async with async_session() as session:
        names = STORE_PAYMENT_FILTERS[store_name]
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–∫–ª–∞–¥–∞: {store_name}")
        print(f"‚û°Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {names}")

        result = await session.execute(
            select(Accounts)
            # .where(Accounts.root_type == "PaymentType")
            .where(Accounts.name.in_(names))
        )
        filtered = result.scalars().all()

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: {[f'{pt.name} ({pt.id})' for pt in filtered]}")

        if not filtered:
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ.")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=pt.name, callback_data=f"w_type:{pt.id}")]
                             for pt in filtered]
        )
        await state.set_state(WriteoffStates.PaymentType)

        # üß© –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ç—É–¥–∞ –∑–∞–ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await state.update_data(header_msg_id=callback.message.message_id)

        # üîê –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tg_id = str(callback.from_user.id)
        async with async_session() as session:
            result = await session.execute(select(Employee).where(Employee.telegram_id == tg_id))
            user = result.scalar_one_or_none()
            full_name = f"{user.first_name} {user.last_name}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        await state.update_data(user_fullname=full_name)



        # ‚¨áÔ∏è –¢–µ–ø–µ—Ä—å –ø–æ–¥ —à–∞–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã —Å–ø–∏—Å–∞–Ω–∏—è
        await callback.message.answer("üìÇ –ö–∞–∫–æ–π —Ç–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è?", reply_markup=keyboard)


@router.callback_query(F.data.startswith("w_type:"))
async def choose_type(callback: types.CallbackQuery, state: FSMContext):
    type_id = callback.data.split(":")[1]
    async with async_session() as session:
        result = await session.execute(select(Accounts).where(Accounts.id == type_id))
        ref = result.scalar_one_or_none()

    if not ref:
        return await callback.message.edit_text("‚ùå –¢–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(
        payment_type_id=ref.id,
        payment_type_name=ref.name,
        search_msg_id=callback.message.message_id  # üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )

    await state.set_state(WriteoffStates.Comment)
    await callback.message.edit_text(f"‚úçÔ∏è –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ ¬´{ref.name}¬ª:")
    data = await state.get_data()
    await update_writeoff_header(callback.message.bot, callback.message.chat.id, data["header_msg_id"], {
        **data,
        "account_name": ref.name
    })

@router.message(WriteoffStates.Comment)
async def get_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    await message.delete()
    tg_id = str(message.from_user.id)

    async with async_session() as session:
        result = await session.execute(
            select(Employee).where(Employee.telegram_id == tg_id)
        )
        user = result.scalar_one_or_none()
        full_name = f"{user.first_name} {user.last_name}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    await state.update_data(comment=comment + f" | –í–≤–µ–ª: {full_name}", items=[])
    await state.set_state(WriteoffStates.AddItems)
    data = await state.get_data()
    msg_id = data.get("search_msg_id")

    if not msg_id:
        # –µ—Å–ª–∏ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Ä–∞–Ω—å—à–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
        await state.update_data(search_msg_id=msg.message_id)
        data = await state.get_data()
        await update_writeoff_header(message.bot, message.chat.id, data["header_msg_id"], data)
    else:
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        await message.bot.edit_message_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
            chat_id=message.chat.id,
            message_id=msg_id
        )

@router.message(WriteoffStates.AddItems)
async def search_products(message: types.Message, state: FSMContext):
    query = message.text.strip()
    await message.delete()
    results = await search_nomenclature_for_writeoff(query)
    if not results:
        return await message.answer("üîé –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    data = await state.get_data()  # üîß –î–æ–±–∞–≤–ª–µ–Ω–æ —ç—Ç–æ

    await state.update_data(nomenclature_cache={r['id']: r for r in results})
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=r['name'], callback_data=f"w_item:{r['id']}")]
        for r in results
    ])
    msg_id = data.get("search_msg_id")
    if msg_id:
        await message.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            chat_id=message.chat.id,
            message_id=msg_id,
            reply_markup=kb
        )

@router.callback_query(F.data.startswith("w_item:"))
async def ask_quantity(callback: types.CallbackQuery, state: FSMContext):
    item_id = callback.data.split(":")[1]
    data = await state.get_data()
    item = data.get("nomenclature_cache", {}).get(item_id)
    await state.update_data(current_item=item)
    unit = await get_unit_name_by_id(item["mainunit"])
    await state.set_state(WriteoffStates.Quantity)
    await callback.message.edit_text(
        f"üìè üñä –°–∫–æ–ª—å–∫–æ {unit} –¥–ª—è ¬´{item['name']}¬ª?"
    )
    await state.update_data(quantity_msg_id=callback.message.message_id)

@router.message(WriteoffStates.Quantity)
async def save_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        qty = float(message.text.replace(",", "."))
        item = data["current_item"]
        item["quantity"] = qty
        items = data["items"]
        items.append(item)
        await state.update_data(items=items)
        await message.delete()
    except:
        return await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    await state.set_state(WriteoffStates.AddItems)

    # –ö–Ω–æ–ø–∫–∞ ¬´–ì–æ—Ç–æ–≤–æ¬ª –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="w_done")]
    ])
    msg_id = data.get("quantity_msg_id")
    if msg_id:
        await message.bot.edit_message_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª:",
            chat_id=message.chat.id,
            message_id=msg_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="w_done")]
            ])
        )
        header_id = data.get("header_msg_id")
        if header_id:
            await update_writeoff_header(message.bot, message.chat.id, header_id, data)


@router.callback_query(F.data == "w_more")
async def more_items(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WriteoffStates.AddItems)
    await callback.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")

@router.callback_query(F.data == "w_done")
async def finalize_writeoff(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date_now = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
    document = {
        "dateIncoming": date_now,
        "status": "NEW",
        "comment": data["comment"],
        "storeId": data["store_id"],
        "accountId": data["payment_type_id"],
        "items": [
            {
                "productId": item["id"],
                "amount": item["quantity"],
                "measureUnitId": item["mainunit"]
            } for item in data["items"]
        ]
    }

    print("üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π JSON-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è iiko:")
    print(document)

    token = await get_auth_token()
    url = f"{get_base_url()}/resto/api/v2/documents/writeoff"
    headers = {"Content-Type": "application/json"}
    params = {"key": token}

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(url, params=params, json=document)
            response.raise_for_status()
            await callback.message.edit_text("‚úÖ –ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ iiko.")
        except httpx.HTTPError as e:
            text = f"‚ùå –û—à–∏–±–∫–∞: {e.response.status_code}\n{e.response.text}"
            await callback.message.edit_text(f"<pre>{escape(text)}</pre>", parse_mode="HTML")
    await state.clear()
