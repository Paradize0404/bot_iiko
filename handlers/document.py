from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from states import DocumentFlow
from utils.db_stores import fetch_by_names
from utils.stores_kb import make_keyboard
from keyboards.main_keyboard import document_menu_keyboard, main_menu_keyboard
from utils.telegram_helpers import tidy_response

router = Router()

WAREHOUSE_NAME_MAP = {
    "–ö—É—Ö–Ω—è": "–ö—É—Ö–Ω—è –ü–∏—Ü—Ü–µ—Ä–∏—è",
    "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π": "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π –ü–∏—Ü—Ü–µ—Ä–∏—è",
    "–ë–∞—Ä": "–ë–∞—Ä –ü–∏—Ü—Ü–µ—Ä–∏—è",
    "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": "–†–∞—Å—Ö. –º–∞—Ç. –ü–∏—Ü—Ü–µ—Ä–∏—è",
}
PREP_WAREHOUSES  = ("–ö—É—Ö–Ω—è", "–ë–∞—Ä", "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π")
WRITE_WAREHOUSES = ("–ö—É—Ö–Ω—è", "–ë–∞—Ä", "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π", "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
MOVE_WAREHOUSES  = ("–ö—É—Ö–Ω—è", "–ë–∞—Ä", "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π")

def render_document_progress(data: dict) -> str:
    doc_map = {
        "prep": "–ê–∫—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è",
        "writeoff": "–ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è",
        "move": "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
    }
    parts = [f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{doc_map.get(data.get('doc_type'), '‚Äî')}</b>"]
    if "src_name" in data:
        parts.append(f"üè∑Ô∏è –°–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫: <b>{data['src_name']}</b>")
    if "dst_name" in data:
        parts.append(f"üì• –°–∫–ª–∞–¥-–ø—Ä–∏—ë–º–Ω–∏–∫: <b>{data['dst_name']}</b>")
    return "\n".join(parts)

@router.message(F.text == "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
async def show_doc_menu(msg: Message) -> None:
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", reply_markup=document_menu_keyboard())

@router.message(F.text == "üßæ –ê–∫—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
async def prep_start(msg: Message, state: FSMContext):
    await _ask_source(
        msg,
        state,
        doc_type="prep",
        warehouse_names=PREP_WAREHOUSES,
        answer_text="üßæ –ê–∫—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.\n<b>–®–∞–≥ 1 / 2.</b> –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫:",
    )

@router.message(F.text == "üìâ –ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è")
async def writeoff_start(msg: Message, state: FSMContext):
    await _ask_source(
        msg,
        state,
        doc_type="writeoff",
        warehouse_names=WRITE_WAREHOUSES,
        answer_text="üìâ –ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å—ã–≤–∞–µ–º:",
        need_destination=False,
    )

@router.message(F.text == "üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ")
async def move_start(msg: Message, state: FSMContext):
    await _ask_source(
        msg,
        state,
        doc_type="move",
        warehouse_names=MOVE_WAREHOUSES,
        answer_text="üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ.\n<b>–®–∞–≥ 1 / 2.</b> –° –∫–∞–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º?",
    )

@router.message(DocumentFlow.picking_src)
async def picked_source(msg: Message, state: FSMContext):
    data = await state.get_data()
    warehouses = data["warehouses"]
    name2id = {name: id_ for id_, name in warehouses}

    if msg.text not in name2id:
        await msg.answer("–ù–µ —É–∑–Ω–∞—é —Ç–∞–∫–æ–π —Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(src_id=name2id[msg.text], src_name=msg.text)

    doc_msg_id = data["doc_msg_id"]
    progress_text = render_document_progress(await state.get_data())
    await msg.bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=doc_msg_id,
        text=progress_text,
        parse_mode="HTML"
    )

    if not data.get("need_destination"):
        await _finish_document(msg, state)
        return

    dst_rows = [(id_, name) for id_, name in warehouses if name != msg.text]
    kb = make_keyboard(dst_rows)
    await state.set_state(DocumentFlow.picking_dst)
    sent = await tidy_response(
        trigger=msg,
        text="<b>–®–∞–≥ 2 / 2.</b> –ù–∞ –∫–∞–∫–æ–π —Å–∫–ª–∞–¥ –ø–µ—Ä–µ–º–µ—â–∞–µ–º?",
        old_msg_id=data.get("question_msg_id"),
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.update_data(question_msg_id=sent.message_id)

@router.message(DocumentFlow.picking_dst)
async def picked_destination(msg: Message, state: FSMContext):
    data = await state.get_data()
    name2id = {name: id_ for id_, name in data["warehouses"]}

    if msg.text not in name2id:
        await msg.answer("–ù–µ —É–∑–Ω–∞—é —Ç–∞–∫–æ–π —Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(dst_id=name2id[msg.text], dst_name=msg.text)

    doc_msg_id = data["doc_msg_id"]
    progress_text = render_document_progress(await state.get_data())
    await msg.bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=doc_msg_id,
        text=progress_text,
        parse_mode="HTML"
    )

    await _finish_document(msg, state)

async def _ask_source(
    msg: Message,
    state: FSMContext,
    *,
    doc_type: str,
    warehouse_names: tuple[str, ...],
    answer_text: str,
    need_destination: bool = True,
):
    db_names = [WAREHOUSE_NAME_MAP.get(name, name) for name in warehouse_names]
    rows = await fetch_by_names(db_names)
    dbname_to_ui = {v: k for k, v in WAREHOUSE_NAME_MAP.items()}
    rows = [(id_, dbname_to_ui.get(name, name)) for id_, name in rows]

    if not rows:
        await msg.answer("‚ùå –í –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.set_state(DocumentFlow.picking_src)
    progress_text = render_document_progress({"doc_type": doc_type})
    sent = await msg.answer(progress_text, parse_mode="HTML")

    kb = make_keyboard(rows)
    sent_question = await msg.answer(answer_text, reply_markup=kb, parse_mode="HTML")

    await state.update_data(
        warehouses=rows,
        doc_type=doc_type,
        need_destination=need_destination,
        doc_msg_id=sent.message_id,
        question_msg_id=sent_question.message_id
    )

async def _finish_document(msg: Message, state: FSMContext) -> None:
    data = await state.get_data()

    # üçï –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    sent = await tidy_response(
        trigger=msg,
        text="üçï –ß—Ç–æ –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å?",
        old_msg_id=data.get("question_msg_id"),
        reply_markup=None,
        parse_mode="HTML"
    )

    # üëá –û–±–Ω–æ–≤–ª—è–µ–º message_id, –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    await state.update_data(question_msg_id=sent.message_id)

    # üßº –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await state.clear()