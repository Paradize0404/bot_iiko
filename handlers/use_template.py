import httpx
from html import escape
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select
from db.employees_db import async_session
from handlers.template_creation import PreparationTemplate  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, String
from iiko.iiko_auth import get_auth_token, get_base_url


router = Router()

PIZZAYOLO_CONCEPTION_ID = "cd6b8810-0f57-4e1e-82a4-3f60fb2ded7a"
Base = declarative_base()

class ReferenceData(Base):
    __tablename__ = "reference_data"

    id = Column(String, primary_key=True)
    root_type = Column(String)
    name = Column(String)
    code = Column(String)


class TemplateFill(StatesGroup):
    Filling = State()
    AwaitQuantity = State()
# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã




async def format_template_info(template) -> str:
    from_store = await get_name_by_id("Store", template.from_store_id) if template.from_store_id else "‚Äî"
    to_store = await get_name_by_id("Store", template.to_store_id) if template.to_store_id else "‚Äî"
    supplier = await get_name_by_id("Supplier", template.supplier_id) if template.supplier_id else "‚Äî"

    return (
        f"üì¶ <b>–®–∞–±–ª–æ–Ω: {template.name}</b>\n"
        f"üîÅ –°–∫–ª–∞–¥ –æ—Ç–∫—É–¥–∞: {from_store}\n"
        f"‚û°Ô∏è –°–∫–ª–∞–¥ –∫—É–¥–∞: {to_store}\n"
        f"üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}"
    )

async def get_name_by_id(type_: str, id_: str) -> str:
    async with async_session() as session:
        result = await session.execute(
            select(ReferenceData.name)
            .where(ReferenceData.id == id_)
            .where(ReferenceData.root_type == type_)
        )
        return result.scalar_one_or_none() or "‚Äî"

async def get_template_keyboard():
    async with async_session() as session:
        result = await session.execute(select(PreparationTemplate.name))
        templates = result.scalars().all()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=name, callback_data=f"template:select:{name}")]
                for name in templates
            ]
        )
        return keyboard

async def get_all_templates():
    async with async_session() as session:
        result = await session.execute(select(PreparationTemplate.name))
        templates = result.scalars().all()
        return templates

async def get_template_by_name(template_name: str):
    async with async_session() as session:
        result = await session.execute(
            select(PreparationTemplate)
            .where(PreparationTemplate.name == template_name)
        )
        return result.scalar_one_or_none()



async def get_unit_name_by_id(unit_id: str) -> str:
    async with async_session() as session:
        result = await session.execute(
            select(ReferenceData.name)
            .where(ReferenceData.id == unit_id)
            .where(ReferenceData.root_type == "MeasureUnit")
        )
        return result.scalar_one_or_none() or "—à—Ç"


async def ask_quantity(message: types.Message, item: dict, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get("prev_msg_id")
    unit_name = await get_unit_name_by_id(item["mainunit"])
    text = f"üìè –°–∫–æ–ª—å–∫–æ {unit_name} –¥–ª—è ¬´{item['name']}¬ª?"

    if prev_msg_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=prev_msg_id,
                text=text
            )
            return
        except Exception:
            pass  # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ

    msg = await message.answer(text)
    await state.update_data(prev_msg_id=msg.message_id)

@router.callback_query(F.data.startswith("template:select:"))
async def handle_template_selected(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.split(":")[-1]
    await callback.message.edit_text(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞: {template_name}")
    # –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–Ω—ë—Ç —à–∞–≥–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞


# –í—ã–≤–æ–¥ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
@router.callback_query(F.data == "prep:by_template")
async def handle_prep_choice(callback: types.CallbackQuery):
    templates = await get_all_templates()

    if not templates:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(text=tpl, callback_data=f"use_template:{tpl}")]
        for tpl in templates
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("use_template:"))
async def use_template_handler(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.split(":", 1)[1]
    template = await get_template_by_name(template_name)

    if not template:
        await callback.message.edit_text("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(
        template_items=template.items,
        current_index=0,
        prev_msg_id=callback.message.message_id,
        from_store_id=template.from_store_id,
        to_store_id=template.to_store_id,
        supplier_id=template.supplier_id,
        supplier_name=template.supplier_name,
        template_name=template.name
    )

    # –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    header = await format_template_info(template)
    first_question = f"üî¢ –°–∫–æ–ª—å–∫–æ {await get_unit_name_by_id(template.items[0]['mainunit'])} –¥–ª—è ¬´{template.items[0]['name']}¬ª?"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
    header_msg = await callback.message.edit_text(header, parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    first_question = f"üî¢ –°–∫–æ–ª—å–∫–æ {await get_unit_name_by_id(template.items[0]['mainunit'])} –¥–ª—è ¬´{template.items[0]['name']}¬ª?"
    question_msg = await callback.message.answer(first_question)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        template_items=template.items,
        current_index=0,
        from_store_id=template.from_store_id,
        to_store_id=template.to_store_id,
        supplier_id=template.supplier_id,
        supplier_name=template.supplier_name,
        template_name=template.name,
        prev_msg_id=question_msg.message_id  # —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    )

    await state.set_state(TemplateFill.AwaitQuantity)

async def send_invoice_to_iiko(xml_data: str) -> str:
    try:
        token = await get_auth_token()
    except Exception as e:
        return f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ iiko –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}"

    url = f"{get_base_url()}/resto/api/documents/import/outgoingInvoice"
    headers = {"Content-Type": "application/xml"}
    params = {"key": token}

    async with httpx.AsyncClient(verify=False) as client:
        try:
            response = await client.post(url, params=params, content=xml_data, headers=headers)
            response.raise_for_status()
            return f"‚úÖ –†–∞—Å—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ iiko.\n–û—Ç–≤–µ—Ç:\n{response.text}"
        except httpx.HTTPError as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π: {e.response.status_code}\n{e.response.text}"

def build_invoice_xml(template: dict) -> str:
    from datetime import datetime
    date_now = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
    doc_number = "tg-inv-" + datetime.now().strftime("%Y%m%d%H%M%S")

    items_xml = ""
    for item in template["items"]:
        price = float(item["price"])
        amount = float(item["quantity"])
        sum_total = round(price * amount, 2)

        items_xml += f"""
        <item>
            <productId>{item['id']}</productId>
            <storeId>{template['to_store_id']}</storeId>
            <price>{price:.2f}</price>
            <amount>{amount:.2f}</amount>
            <sum>{sum_total:.2f}</sum>
        </item>"""

    xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<document>
    <documentNumber>{doc_number}</documentNumber>
    <dateIncoming>{date_now}</dateIncoming>
    <useDefaultDocumentTime>true</useDefaultDocumentTime>
    <revenueAccountCode>4.08</revenueAccountCode>
    <counteragentId>{template['supplier_id']}</counteragentId>
    <defaultStoreId>{template['to_store_id']}</defaultStoreId>
    <conceptionId>{PIZZAYOLO_CONCEPTION_ID}</conceptionId>
    <comment>–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</comment>
    <items>{items_xml}
    </items>
</document>"""
    return xml



def build_xml(template: dict) -> str:
    from datetime import datetime
    date_now = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
    doc_number = "tg-" + datetime.now().strftime("%Y%m%d%H%M%S")

    items_xml = ""
    for idx, item in enumerate(template["items"], start=1):
        items_xml += f"""
        <item>
            <num>{idx}</num>
            <product>{item['id']}</product>
            <amount>{item['quantity']}</amount>
            <amountUnit>{item['mainunit']}</amountUnit>
        </item>"""

    xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<document>
    <storeFrom>{template['from_store_id']}</storeFrom>
    <storeTo>{template['to_store_id']}</storeTo>
    <dateIncoming>{date_now}</dateIncoming>
    <documentNumber>{doc_number}</documentNumber>
    <conception>{PIZZAYOLO_CONCEPTION_ID}</conception>
    <comment>–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞</comment>
    <items>{items_xml}
    </items>
</document>"""
    return xml


async def send_to_iiko(xml_data: str) -> str:
    try:
        token = await get_auth_token()
    except Exception as e:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ iiko: {e}"

    url = f"{get_base_url()}/resto/api/documents/import/productionDocument"
    headers = {
        "Content-Type": "application/xml"
    }
    params = {
        "key": token
    }

    async with httpx.AsyncClient(verify=False) as client:
        try:
            response = await client.post(url, params=params, content=xml_data, headers=headers)
            response.raise_for_status()
            return f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ iiko.\n–û—Ç–≤–µ—Ç:\n{response.text}"
        except httpx.HTTPError as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ iiko: {e.response.status_code}\n{e.response.text}"
        except Exception as e:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"



@router.message(TemplateFill.AwaitQuantity)
async def handle_quantity_input(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data.get("current_index", 0)
    items = user_data["template_items"]

    try:
        qty = float(message.text.replace(",", "."))
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    items[current_index]["quantity"] = qty

    if current_index + 1 < len(items):
        next_index = current_index + 1
        await state.update_data(
            template_items=items,
            current_index=next_index
        )
        await ask_quantity(message, items[next_index], state)
    else:
        prev_msg_id = user_data.get("prev_msg_id")
        msg_text = "‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –®–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é."

        if prev_msg_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=prev_msg_id,
                    text=msg_text
                )
            except Exception:
                await message.answer(msg_text)
        else:
            await message.answer(msg_text)

        final_data = {
            "name": user_data.get("template_name"),
            "from_store_id": user_data.get("from_store_id"),
            "to_store_id": user_data.get("to_store_id"),
            "supplier_id": user_data.get("supplier_id"),
            "supplier_name": user_data.get("supplier_name"),
            "items": items
        }

        print("‚úÖ –ò–¢–û–ì–û–í–´–ô –®–ê–ë–õ–û–ù:\n", final_data)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        xml_data = build_xml(final_data)
        print("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º XML –≤ iiko:\n", xml_data)
        result_msg = await send_to_iiko(xml_data)

        invoice_msg = ""
        if final_data.get("supplier_id") and all("price" in i for i in items):
            invoice_xml = build_invoice_xml(final_data)
            invoice_msg = await send_invoice_to_iiko(invoice_xml)
        else:
            invoice_msg = "‚ÑπÔ∏è –†–∞—Å—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å."

        escaped = escape(result_msg + "\n\n" + invoice_msg)
        await message.answer(f"<pre>{escaped}</pre>", parse_mode="HTML")

        await state.clear()





