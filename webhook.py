# webhook.py
import os
import asyncio
import logging
from dotenv import load_dotenv

from config import bot  # ‚Üê —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ config
from bot import dp      # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º dp –∏–∑ bot.py

from aiogram.methods import DeleteWebhook
from fastapi import FastAPI, Request
from aiogram.types import Update
import uvicorn

load_dotenv()
logging.basicConfig(level=logging.INFO)

MODE = os.getenv("MODE", "dev")

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    if MODE == "dev":
        logging.info("üß™ dev mode: —É–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling")
        await bot(DeleteWebhook(drop_pending_updates=True))
        await dp.start_polling(bot)
    else:
        logging.info("üöÄ prod mode: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook")
        await bot.set_webhook("https://botiiko-production.up.railway.app/webhook")

@app.post("/webhook")
async def handle_webhook(request: Request):
    logging.info("üì• Webhook –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

if __name__ == "__main__":
    if MODE == "dev":
        asyncio.run(on_startup())  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ polling
    else:
        uvicorn.run
